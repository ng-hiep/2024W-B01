Extend your photo app to have the notion of a user being logged in. If a user is logged in, the toolbar should include a small message "Hi <firstname>" where <firstname> is the first name of the logged-in user. The toolbar should also contain a button displaying "Logout" that will log the user out.

If there is no user logged in, the toolbar should display "Please Login" and the main view of your application should display a new view component named LoginRegister. The LoginRegister view should provide a way for a user to login and, as part of Problem 4 below, register as a new user. All attempts to navigate to a different view (e.g., deep links) should result in the display being redirected to the LoginRegister view if no user is logged in. (See the hints section if you are unsure how to implement this.) In addition, the user list on the left should not be populated if the current user is not logged in. (See the section below about modifying the server endpoints to return a status of 401 (Unauthorized).)

When a user logs in successfully, the view should switch to displaying the user's details. If the user login fails (e.g., no user with the login_name) the view should report an appropriate error message and let the user try again.

Extend your backend implementation to support the photo app's notion of logged in users. In making this change you will need to change both the database schema and the web server API.

Extend the Mongoose schema for User to add a new property login_name. This property is a string containing the identifier the user will type when logging in (their "login name").

Modify the web server API to support 2 new REST API calls for logging a user in and out. Like in the previous assignment we will use HTTP requests with JSON-encoded bodies to transmit model data. The API uses POST requests to:
●	/admin/login - Provides a way for the photo app's LoginRegister view to login in a user. The POST request JSON-encoded body should include a property login_name (no passwords for now) and reply with information needed by your app for logged in user. An HTTP status of 400 (Bad request) should be returned if the login failed (e.g., login_name is not a valid account). A parameter in the request body is accessed using request.body.parameter_name. Note the login register handler should ensure that there exists a user with the given login_name. If so, it stores some information in the Express session (or generate a JWT token if using token-based authentication) where it can be checked by other request handlers that need to know whether a user is logged in. The return body of POST /admin/login should be the properties of the logged in user your web app needs. Our tests require the _id property but you can include any other user object properties. Returning the entire user object is discouraged because of what is added in Problem 4.
●	/admin/logout - A POST request with an empty body to this URL will logout the user by clearing the information stored in the session (or delete the JWT token on the client if using token-based authentication) . An HTTP status of 400 (Bad request) should be returned in the user is not currently logged in.

As part of updating the web server to handle login/logout, you need to update all requests (except to /admin/login and /admin/logout) to reject the request with a status of 401 (Unauthorized) if the session state does not report a user is logged in (or does not have valid token in request header if using token-based authentication).
